pluginManagement {
    // 对应PluginManagementSpec类
    repositories { // 管理Plugin Repository(仓库)
        google { url "https://maven.aliyun.com/repository/gradle-plugin" }
    }

    resolutionStrategy {
        eachPlugin {   // 接收一个PluginResolveDetails类型的闭包，requested可以获得plugin的信息
            println "${requested.id} → ${requested.module} → ${requested.version}"
            // 替换模块
            if (requested.id.namespace == "org.jetbrains.kotlin") {
                useModule("org.jetbrains.kotlin.jvm:org.jetbrains.kotlin.jvm.gradle.plugin:${requested.version}")
            }
            // 统一插件版本
            if (requested.id.id == "org.jetbrains.kotlin.jvm") {
                useVersion("1.3.71")
            }
        }
    }
}

include ':Base'
include ':user_export'
include ':apm'
include ':modify-class'
include ':user'
include ':router-runtime'// 申明子工程
include ':hotfit'
include ':app'
include ':router-gradle-plugin'
include ':router-gradle-plugin2'
include ':router-annotations'
include ':router-processor'
rootProject.name = "GradleStudy"

project(":user").projectDir

println("-----我是settings.gradle  ---- ${rootProject.projectDir}")


// 添加构建生命周期监听
gradle.addBuildListener(new BuildListener() {

    @Override
    void buildStarted(Gradle gradle) {
        // 这个回调一般不会调用，因为我们注册的时机太晚，注册的时候构建已经开始了，是 gradle 内部使用的
        println("[life-cycle] ---- buildStarted")
    }

    // 初始化阶段完成  申明子工程完成    settings.gradle文件解析完成
    @Override
    void settingsEvaluated(Settings settings) {
        println("[life-cycle] ---- 初始化阶段完成")
    }


    //项目加载完成
    @Override
    void projectsLoaded(Gradle gradle) {
        println("[life-cycle] ---- 项目加载完成")
        gradle.rootProject.subprojects.each { pro ->
            pro.beforeEvaluate {
                println("---此 ${pro.name} 项目配置之前调用")
            }
            pro.afterEvaluate {
                println("---此${pro.name} 项目配置之后调用a")
            }
        }
    }


    //所有project配置阶段完成
    @Override
    void projectsEvaluated(Gradle gradle) {
        println("[life-cycle] ---- 所有project配置阶段完成")
    }
    //构建结束

    @Override
    void buildFinished(BuildResult result) {
        println("[life-cycle] ---- 构建结束")
    }
})


gradle.taskGraph.beforeTask { Task task ->
    println("all task >>>" + task.name)
}

println "gradleHomeDir >>>"+gradle.gradleHomeDir
println "gradleHomeDir >>>"+gradle.gradleUserHomeDir


gradle.afterProject {
    println '>>>>>>>gradle.afterProject'
}



gradle.beforeProject {
    println '>>>>>>>gradle.beforeProject'
}


gradle.projectsLoaded {
    println '>>>>>>>gradle.projectsLoaded'
}
gradle.projectsEvaluated {
    println '>>>>>>>gradle.projectsEvaluated'
}

gradle.buildStarted {

    println '>>>>>>>gradle.buildStarted'
}
gradle.settingsEvaluated {
    println '>>>>>>>gradle.settingsEvaluated'
}
gradle.buildFinished {
    println '>>>>>>>gradle.buildFinished'
}

